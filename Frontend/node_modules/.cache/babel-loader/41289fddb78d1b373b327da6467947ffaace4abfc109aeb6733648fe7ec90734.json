{"ast":null,"code":"var _jsxFileName = \"/home/yhx/Projects/AnnVideo/Frontend/src/components/ImageCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport \"../assets/css/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageCanvas(props) {\n  _s();\n  const [boxes, setBoxes] = useState([]);\n  const [canvas, setCanvas] = useState();\n  const [ctx, setCtx] = useState();\n  // const canvas = document.getElementById(\"imageCanvas\");\n  // const ctx = canvas.getContext(\"2d\");\n  const canvasRef = useRef();\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    setCtx(canvas.getContext(\"2d\"));\n    ctx.fillStyle = \"green\";\n    ctx.fillRect(10, 10, 150, 100);\n    ctx.fillRect(20, 20, 180, 130);\n  }, []);\n\n  ///////////////////// for drawing one box ////////////////////////////\n\n  //  flag: where user is dragging the box\n  const [isDown, setIsDown] = useState(false);\n  const [startX, setStartX] = useState();\n  const [startY, setStartY] = useState();\n  const [prevStartX, setPrevStartX] = useState(0);\n  const [prevStartY, setPrevStartY] = useState(0);\n  const [prevWidth, setPrevWidth] = useState(0);\n  const [prevHeight, setPrevHeight] = useState(0);\n  const handleMouseDown = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // save the starting x/y of the rectangle\n    setStartX(parseInt(e.clientX - offsetX));\n    setStartY(parseInt(e.clientY - offsetY));\n\n    // set a flag indicating the drag has begun\n    setIsDown(true);\n  };\n  const handleMouseUp = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // the drag is over, clear the dragging flag\n    setIsDown(false);\n    ctx.strokeRect(prevStartX, prevStartY, prevWidth, prevHeight);\n  };\n  const handleMouseMove = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // if we're not dragging, just return\n    if (!isDown) {\n      return;\n    }\n\n    // get the current mouse position\n    let mouseX = parseInt(e.clientX - offsetX);\n    let mouseY = parseInt(e.clientY - offsetY);\n\n    // Put your mousemove stuff here\n\n    // calculate the rectangle width/height based\n    // on starting vs current mouse position\n    var width = mouseX - startX;\n    var height = mouseY - startY;\n\n    // clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // draw a new rect from the start position \n    // to the current mouse position\n    ctx.strokeRect(startX, startY, width, height);\n    setPrevStartX(startX);\n    setPrevStartY(startY);\n    setPrevWidth(width);\n    setPrevHeight(height);\n  };\n  const handleMouseOut = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // the drag is over, clear the dragging flag\n    setIsDown(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"imageCanvas\",\n    ref: canvasRef,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onMouseMove: handleMouseMove,\n    onMouseOut: handleMouseOut\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageCanvas, \"LHgp7DcXfeT1HTM/t5W/vyrcB+8=\");\n_c = ImageCanvas;\nexport default ImageCanvas;\nvar _c;\n$RefreshReg$(_c, \"ImageCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","ImageCanvas","props","_s","boxes","setBoxes","canvas","setCanvas","ctx","setCtx","canvasRef","current","getContext","fillStyle","fillRect","isDown","setIsDown","startX","setStartX","startY","setStartY","prevStartX","setPrevStartX","prevStartY","setPrevStartY","prevWidth","setPrevWidth","prevHeight","setPrevHeight","handleMouseDown","e","preventDefault","stopPropagation","parseInt","clientX","offsetX","clientY","offsetY","handleMouseUp","strokeRect","handleMouseMove","mouseX","mouseY","width","height","clearRect","handleMouseOut","id","ref","onMouseDown","onMouseUp","onMouseMove","onMouseOut","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/yhx/Projects/AnnVideo/Frontend/src/components/ImageCanvas.js"],"sourcesContent":["import React,{useRef, useEffect, useState} from 'react';\nimport \"../assets/css/canvas.css\";\n\nfunction ImageCanvas(props) {\n    const [boxes, setBoxes] = useState([]);\n    const [canvas, setCanvas] = useState();\n    const [ctx, setCtx] = useState();\n    // const canvas = document.getElementById(\"imageCanvas\");\n    // const ctx = canvas.getContext(\"2d\");\n    const canvasRef = useRef();\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        setCtx(canvas.getContext(\"2d\"));\n\n        ctx.fillStyle = \"green\";\n        ctx.fillRect(10, 10, 150, 100);\n        ctx.fillRect(20, 20, 180, 130);\n    },[])\n\n\n\n    ///////////////////// for drawing one box ////////////////////////////\n\n    //  flag: where user is dragging the box\n    const [isDown, setIsDown] = useState(false);\n    const [startX, setStartX] = useState();\n    const [startY, setStartY] = useState();\n\n    const [prevStartX, setPrevStartX] = useState(0);\n    const [prevStartY, setPrevStartY] = useState(0);\n\n    const [prevWidth, setPrevWidth] = useState(0);\n    const [prevHeight, setPrevHeight] = useState(0);    \n\n\n    const handleMouseDown = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // save the starting x/y of the rectangle\n        setStartX( parseInt(e.clientX - offsetX) );\n        setStartY(parseInt(e.clientY - offsetY));\n    \n        // set a flag indicating the drag has begun\n        setIsDown(true);\n    };\n\n    const handleMouseUp = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // the drag is over, clear the dragging flag\n        setIsDown(false);\n        ctx.strokeRect(prevStartX, prevStartY, prevWidth, prevHeight);\n    }\n\n    const handleMouseMove = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // if we're not dragging, just return\n        if (!isDown) {\n            return;\n        }\n    \n        // get the current mouse position\n        let mouseX = parseInt(e.clientX - offsetX);\n        let mouseY = parseInt(e.clientY - offsetY);\n    \n        // Put your mousemove stuff here\n    \n        \n    \n        // calculate the rectangle width/height based\n        // on starting vs current mouse position\n        var width = mouseX - startX;\n        var height = mouseY - startY;\n    \n            // clear the canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n        // draw a new rect from the start position \n        // to the current mouse position\n        ctx.strokeRect(startX, startY, width, height);\n        \n            setPrevStartX(startX);\n            setPrevStartY(startY);\n    \n            setPrevWidth(width);\n            setPrevHeight(height);\n    }\n\n\n    const handleMouseOut = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // the drag is over, clear the dragging flag\n        setIsDown(false);\n    }\n\n\n    return (\n        <canvas \n            id=\"imageCanvas\"\n            ref={canvasRef} \n            onMouseDown={handleMouseDown} \n            onMouseUp={handleMouseUp}\n            onMouseMove={handleMouseMove}\n            onMouseOut={handleMouseOut}\n        ></canvas>\n    );\n}\n\nexport default ImageCanvas;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}