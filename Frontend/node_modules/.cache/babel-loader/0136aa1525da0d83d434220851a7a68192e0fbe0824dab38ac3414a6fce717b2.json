{"ast":null,"code":"var _jsxFileName = \"/home/yhx/Projects/AnnVideo/Frontend/src/components/ImageCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport \"../assets/css/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageCanvas(props) {\n  _s();\n  const [boxes, setBoxes] = useState([]);\n  const [canvas, setCanvas] = useState();\n  const [ctx, setCtx] = useState();\n  // calculate the x-y of the canvas\n  const [offsetX, setOffsetX] = useState();\n  const [offsetY, setOffsetY] = useState();\n  // var scrollX = canvasRef.current.scrollLeft();\n  // var scrollY = canvasRef.current.scrollTop();\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    const imageCanvas = canvasRef.current;\n    setCanvas(imageCanvas);\n    setCtx(imageCanvas.getContext(\"2d\"));\n    setOffsetX(imageCanvas.offsetLeft);\n    setOffsetY(imageCanvas.offsetTop);\n  }, []);\n\n  ///////////////////// for drawing one box ////////////////////////////\n  //  flag: where user is dragging the box\n  const [isDown, setIsDown] = useState(false);\n  const [startX, setStartX] = useState();\n  const [startY, setStartY] = useState();\n  const [prevStartX, setPrevStartX] = useState(0);\n  const [prevStartY, setPrevStartY] = useState(0);\n  const [prevWidth, setPrevWidth] = useState(0);\n  const [prevHeight, setPrevHeight] = useState(0);\n  const handleMouseDown = e => {\n    console.log(\"asd\");\n    e.preventDefault();\n    e.stopPropagation();\n\n    // save the starting x/y of the rectangle\n    setStartX(parseInt(e.clientX - offsetX));\n    console.log(e.clientX, \" \", offsetX);\n    setStartY(parseInt(e.clientY - offsetY));\n\n    // set a flag indicating the drag has begun\n    setIsDown(true);\n  };\n  const handleMouseUp = e => {\n    console.log(\"dsa\");\n    e.preventDefault();\n    e.stopPropagation();\n\n    // the drag is over, clear the dragging flag\n    setIsDown(false);\n    ctx.strokeRect(prevStartX, prevStartY, prevWidth, prevHeight);\n  };\n  const handleMouseMove = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // if we're not dragging, just return\n    if (!isDown) {\n      return;\n    }\n\n    // get the current mouse position relative to \n    let mouseX = parseInt(e.clientX - offsetX);\n    let mouseY = parseInt(e.clientY - offsetY);\n\n    // calculate the rectangle width/height based on starting vs current mouse position\n    var width = mouseX - startX;\n    var height = mouseY - startY;\n\n    // clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // draw a new rect from the start position to the current mouse position\n    ctx.strokeStyle = \"green\";\n    // ctx.lineWidth = 2;\n    ctx.strokeRect(startX, startY, width, height);\n    console.log(startX, \" \", startY, \" \", width, \" \", height);\n    setPrevStartX(startX);\n    setPrevStartY(startY);\n    setPrevWidth(width);\n    setPrevHeight(height);\n  };\n  const handleMouseOut = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // the drag is over, clear the dragging flag\n    setIsDown(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"canvas-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"overlay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"imageCanvas\",\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseMove: handleMouseMove,\n      onMouseOut: handleMouseOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageCanvas, \"TnENNnwZrCB1or69GW3fxZv4RjA=\");\n_c = ImageCanvas;\nexport default ImageCanvas;\nvar _c;\n$RefreshReg$(_c, \"ImageCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","ImageCanvas","props","_s","boxes","setBoxes","canvas","setCanvas","ctx","setCtx","offsetX","setOffsetX","offsetY","setOffsetY","canvasRef","imageCanvas","current","getContext","offsetLeft","offsetTop","isDown","setIsDown","startX","setStartX","startY","setStartY","prevStartX","setPrevStartX","prevStartY","setPrevStartY","prevWidth","setPrevWidth","prevHeight","setPrevHeight","handleMouseDown","e","console","log","preventDefault","stopPropagation","parseInt","clientX","clientY","handleMouseUp","strokeRect","handleMouseMove","mouseX","mouseY","width","height","clearRect","strokeStyle","handleMouseOut","id","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onMouseDown","onMouseUp","onMouseMove","onMouseOut","_c","$RefreshReg$"],"sources":["/home/yhx/Projects/AnnVideo/Frontend/src/components/ImageCanvas.js"],"sourcesContent":["import React,{useRef, useEffect, useState} from 'react';\nimport \"../assets/css/canvas.css\";\n\nfunction ImageCanvas(props) {\n    const [boxes, setBoxes] = useState([]);\n    const [canvas, setCanvas] = useState();\n    const [ctx, setCtx] = useState();\n    // calculate the x-y of the canvas\n    const [offsetX, setOffsetX] = useState();\n    const [offsetY, setOffsetY] = useState();\n    // var scrollX = canvasRef.current.scrollLeft();\n    // var scrollY = canvasRef.current.scrollTop();\n\n    const canvasRef = useRef();\n    useEffect(() => {\n        const imageCanvas = canvasRef.current;\n        setCanvas(imageCanvas);\n        setCtx(imageCanvas.getContext(\"2d\"));\n        setOffsetX(imageCanvas.offsetLeft);\n        setOffsetY(imageCanvas.offsetTop)\n\n\n    },[])\n\n\n\n    ///////////////////// for drawing one box ////////////////////////////\n    //  flag: where user is dragging the box\n    const [isDown, setIsDown] = useState(false);\n    const [startX, setStartX] = useState();\n    const [startY, setStartY] = useState();\n\n    const [prevStartX, setPrevStartX] = useState(0);\n    const [prevStartY, setPrevStartY] = useState(0);\n\n    const [prevWidth, setPrevWidth] = useState(0);\n    const [prevHeight, setPrevHeight] = useState(0);    \n\n\n    const handleMouseDown = (e) => {\n        console.log(\"asd\");\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // save the starting x/y of the rectangle\n        setStartX( parseInt(e.clientX - offsetX) );\n        console.log(e.clientX, \" \", offsetX);\n        setStartY(parseInt(e.clientY - offsetY));\n    \n        // set a flag indicating the drag has begun\n        setIsDown(true);\n    };\n\n    const handleMouseUp = (e) => {\n        console.log(\"dsa\");\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // the drag is over, clear the dragging flag\n        setIsDown(false);\n        ctx.strokeRect(prevStartX, prevStartY, prevWidth, prevHeight);\n    }\n\n    const handleMouseMove = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // if we're not dragging, just return\n        if (!isDown) {\n            return;\n        }\n    \n        // get the current mouse position relative to \n        let mouseX = parseInt(e.clientX - offsetX);\n        let mouseY = parseInt(e.clientY - offsetY);    \n    \n        // calculate the rectangle width/height based on starting vs current mouse position\n        var width = mouseX - startX;\n        var height = mouseY - startY;\n    \n            // clear the canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n        // draw a new rect from the start position to the current mouse position\n        ctx.strokeStyle = \"green\";\n        // ctx.lineWidth = 2;\n        ctx.strokeRect(startX, startY, width, height);\n        console.log(startX,\" \" ,startY,\" \" ,width,\" \" ,height);\n\n\n        setPrevStartX(startX);\n        setPrevStartY(startY);\n    \n        setPrevWidth(width);\n        setPrevHeight(height);\n    }\n\n\n    const handleMouseOut = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // the drag is over, clear the dragging flag\n        setIsDown(false);\n    }\n\n\n    return (\n        <div id='canvas-wrapper'>\n            <canvas id=\"overlay\"></canvas>\n            <canvas \n                id=\"imageCanvas\"\n                ref={canvasRef} \n                onMouseDown={handleMouseDown} \n                onMouseUp={handleMouseUp}\n                onMouseMove={handleMouseMove}\n                onMouseOut={handleMouseOut}\n            ></canvas>\n        </div>\n\n    );\n}\n\nexport default ImageCanvas;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}