{"ast":null,"code":"var _jsxFileName = \"/home/yhx/Projects/AnnVideo/Frontend/src/components/ImageCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, forwardRef, useImperativeHandle } from 'react';\nimport \"../assets/css/canvas.css\";\nimport { boxColors } from '../assets/utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCanvas = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const [boxes, setBoxes] = useState([]);\n  const [color, setColor] = useState(boxColors[0]);\n  const [canvas, setCanvas] = useState();\n  const [ctx, setCtx] = useState();\n  // const [canvasBox, setCanvasBox] = useState();\n  const [ctxBox, setCtxBox] = useState();\n  // calculate the x-y of the canvas\n  const [offsetX, setOffsetX] = useState();\n  const [offsetY, setOffsetY] = useState();\n  const canvasRef = useRef();\n  const canvasBoxRef = useRef();\n  useEffect(() => {\n    const imageCanvas = canvasRef.current;\n    setCanvas(imageCanvas);\n    setCtx(imageCanvas.getContext(\"2d\"));\n    const rect = canvasRef.current.getBoundingClientRect();\n    setOffsetX(rect.left);\n    setOffsetY(rect.top);\n    setCtxBox(canvasBoxRef.current.getContext(\"2d\"));\n  }, []);\n\n  // Change box colors and ids\n  useEffect(() => {\n    let n = boxColors.length;\n    let colorIndex = boxes.length % n;\n    setColor(boxColors[colorIndex]);\n  }, [boxes]);\n\n  // clean all the box\n  useImperativeHandle(ref, () => ({\n    cleanBoxes() {\n      setBoxes([]);\n      ctxBox.clearRect(0, 0, canvasBoxRef.current.width, canvasBoxRef.current.height);\n    }\n  }));\n\n  ///////////////////// for drawing one box ////////////////////////////\n  //  flag: where user is dragging the box\n  const [isDown, setIsDown] = useState(false);\n  const [startX, setStartX] = useState();\n  const [startY, setStartY] = useState();\n  const [prevStartX, setPrevStartX] = useState(0);\n  const [prevStartY, setPrevStartY] = useState(0);\n  const [prevWidth, setPrevWidth] = useState(0);\n  const [prevHeight, setPrevHeight] = useState(0);\n  const handleMouseUp = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // the drag is over, clear the dragging flag, remove the box in the canvas panel and draw it on canvasBox panel\n    setIsDown(false);\n    ctxBox.strokeStyle = color;\n    ctxBox.width = 2;\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    ctxBox.strokeRect(prevStartX, prevStartY, prevWidth, prevHeight);\n    setBoxes([...boxes, {\n      \"id\": boxes.length,\n      'name': `<region ${boxes.length}>`,\n      'color': color,\n      \"box\": [prevStartX, prevStartY, prevWidth, prevHeight]\n    }]);\n  };\n  const handleMouseDown = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // const rect = canvasRef.current.getBoundingClientRect();\n    // const currentOffsetX = rect.left;\n    // const currentOffsetY = rect.top;\n\n    ctx.strokeStyle = color;\n    setStartX(parseInt(e.clientX - offsetX + window.scrollX));\n    setStartY(parseInt(e.clientY - offsetY + window.scrollY));\n    setIsDown(true);\n  };\n  const handleMouseMove = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!isDown) {\n      return;\n    }\n\n    // const rect = canvasRef.current.getBoundingClientRect();\n    // const currentOffsetX = rect.left;\n    // const currentOffsetY = rect.top;\n\n    let mouseX = parseInt(e.clientX - offsetX + window.scrollX);\n    let mouseY = parseInt(e.clientY - offsetY + window.scrollY);\n    var width = mouseX - startX;\n    var height = mouseY - startY;\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    ctx.strokeRect(startX, startY, width, height);\n    setPrevStartX(startX);\n    setPrevStartY(startY);\n    setPrevWidth(width);\n    setPrevHeight(height);\n  };\n  const handleMouseOut = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // the drag is over, clear the dragging flag\n    setIsDown(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"canvas-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvaxBox\",\n      ref: canvasBoxRef,\n      height: 360,\n      width: 640\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"imageCanvas\",\n      height: 360,\n      width: 640,\n      ref: canvasRef,\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseMove: handleMouseMove,\n      onMouseOut: handleMouseOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}, \"yWTzqemko3inln6qiesTAVCkink=\")), \"yWTzqemko3inln6qiesTAVCkink=\");\n_c2 = ImageCanvas;\nexport default ImageCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"ImageCanvas$forwardRef\");\n$RefreshReg$(_c2, \"ImageCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","forwardRef","useImperativeHandle","boxColors","jsxDEV","_jsxDEV","ImageCanvas","_s","_c","props","ref","boxes","setBoxes","color","setColor","canvas","setCanvas","ctx","setCtx","ctxBox","setCtxBox","offsetX","setOffsetX","offsetY","setOffsetY","canvasRef","canvasBoxRef","imageCanvas","current","getContext","rect","getBoundingClientRect","left","top","n","length","colorIndex","cleanBoxes","clearRect","width","height","isDown","setIsDown","startX","setStartX","startY","setStartY","prevStartX","setPrevStartX","prevStartY","setPrevStartY","prevWidth","setPrevWidth","prevHeight","setPrevHeight","handleMouseUp","e","preventDefault","stopPropagation","strokeStyle","strokeRect","handleMouseDown","parseInt","clientX","window","scrollX","clientY","scrollY","handleMouseMove","mouseX","mouseY","handleMouseOut","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseUp","onMouseMove","onMouseOut","_c2","$RefreshReg$"],"sources":["/home/yhx/Projects/AnnVideo/Frontend/src/components/ImageCanvas.js"],"sourcesContent":["import React,{useRef, useEffect, useState, forwardRef, useImperativeHandle} from 'react';\nimport \"../assets/css/canvas.css\";\nimport { boxColors } from '../assets/utils/utils';\n\nconst ImageCanvas = forwardRef( (props, ref) => {\n    const [boxes, setBoxes] = useState([]);\n    const [color, setColor] = useState(boxColors[0]);\n\n    const [canvas, setCanvas] = useState();\n    const [ctx, setCtx] = useState();\n    // const [canvasBox, setCanvasBox] = useState();\n    const [ctxBox, setCtxBox] = useState();\n    // calculate the x-y of the canvas\n    const [offsetX, setOffsetX] = useState();\n    const [offsetY, setOffsetY] = useState();\n\n    const canvasRef = useRef();\n    const canvasBoxRef = useRef();\n    useEffect(() => {\n        const imageCanvas = canvasRef.current;\n        setCanvas(imageCanvas);\n        setCtx(imageCanvas.getContext(\"2d\"));\n        const rect = canvasRef.current.getBoundingClientRect();\n        setOffsetX(rect.left);\n        setOffsetY(rect.top)\n        setCtxBox(canvasBoxRef.current.getContext(\"2d\"));\n    },[])\n\n    // Change box colors and ids\n    useEffect(() => {\n        let n = boxColors.length;\n        let colorIndex = boxes.length %n; \n        setColor(boxColors[colorIndex])\n    }, [boxes])\n\n    // clean all the box\n    useImperativeHandle(ref, () => ({ \n        cleanBoxes (){\n            setBoxes([]);\n            ctxBox.clearRect(0, 0, canvasBoxRef.current.width, canvasBoxRef.current.height);\n        }\n     }));\n\n\n\n\n\n    ///////////////////// for drawing one box ////////////////////////////\n    //  flag: where user is dragging the box\n    const [isDown, setIsDown] = useState(false);\n    const [startX, setStartX] = useState();\n    const [startY, setStartY] = useState();\n\n    const [prevStartX, setPrevStartX] = useState(0);\n    const [prevStartY, setPrevStartY] = useState(0);\n\n    const [prevWidth, setPrevWidth] = useState(0);\n    const [prevHeight, setPrevHeight] = useState(0);    \n\n\n\n    const handleMouseUp = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // the drag is over, clear the dragging flag, remove the box in the canvas panel and draw it on canvasBox panel\n        setIsDown(false);\n        ctxBox.strokeStyle = color;\n        ctxBox.width = 2;\n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n        ctxBox.strokeRect(prevStartX, prevStartY, prevWidth, prevHeight);\n        setBoxes([...boxes, {\n            \"id\":boxes.length,\n            'name':`<region ${boxes.length}>`,\n            'color':color,\n            \"box\":[prevStartX, prevStartY, prevWidth, prevHeight]\n        }])\n    }\n\n    const handleMouseDown = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // const rect = canvasRef.current.getBoundingClientRect();\n        // const currentOffsetX = rect.left;\n        // const currentOffsetY = rect.top;\n        \n        ctx.strokeStyle=color;\n        setStartX(parseInt(e.clientX - offsetX + window.scrollX));\n        setStartY(parseInt(e.clientY - offsetY + window.scrollY));\n    \n        setIsDown(true);\n    };\n    \n    const handleMouseMove = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        if (!isDown) {\n            return;\n        }\n    \n        // const rect = canvasRef.current.getBoundingClientRect();\n        // const currentOffsetX = rect.left;\n        // const currentOffsetY = rect.top;\n    \n        let mouseX = parseInt(e.clientX - offsetX + window.scrollX);\n        let mouseY = parseInt(e.clientY - offsetY + window.scrollY);\n    \n        var width = mouseX - startX;\n        var height = mouseY - startY;\n    \n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n        ctx.strokeRect(startX, startY, width, height);\n    \n        setPrevStartX(startX);\n        setPrevStartY(startY);\n        setPrevWidth(width);\n        setPrevHeight(height);\n    };\n\n    const handleMouseOut = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    \n        // the drag is over, clear the dragging flag\n        setIsDown(false);\n    }\n\n\n    return (\n        <div id='canvas-wrapper'>\n            <canvas id=\"canvaxBox\" ref={canvasBoxRef} height={360} width={640}></canvas>\n            <canvas \n                id=\"imageCanvas\"\n                height={360} width={640}\n                ref={canvasRef} \n                onMouseDown={handleMouseDown} \n                onMouseUp={handleMouseUp}\n                onMouseMove={handleMouseMove}\n                onMouseOut={handleMouseOut}\n            ></canvas>\n            \n        </div>\n\n    );\n});\n\nexport default ImageCanvas;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}