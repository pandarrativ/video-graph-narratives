{"ast":null,"code":"var _jsxFileName = \"/home/yhx/Projects/AnnVideo/Frontend/src/components/MoviePanel.js\",\n  _s = $RefreshSig$();\n// components/MoviePanel.js\n\nimport React, { useRef, forwardRef, useState, useImperativeHandle } from 'react';\nimport ImageCanvas from './ImageCanvas';\nimport VideoPlayer from './VideoPlayer';\nimport axios from \"axios\";\nimport { instanceSegmentationRouter, imageUploadRouter } from '../utils/router';\nimport IconBoudingBox from \"../assets/icon/draw.svg\";\nimport IconInsSegmentation from \"../assets/icon/set.svg\";\nimport IconCleanBoxes from \"../assets/icon/clean.svg\";\nimport IconStartCon from \"../assets/icon/start.svg\";\nimport IconScencesGraph from \"../assets/icon/relation.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoviePanel = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const [showCanvas, setShowCanvas] = useState(false);\n  const [screenShot, setScreenShot] = useState();\n  //toggle show canvas\n  function toggleShowCanvas() {\n    setShowCanvas(!showCanvas);\n  }\n\n  // Placeholder content for the MoviePanel\n  const imageCanvasRef = useRef();\n  const videoRef = useRef();\n  const callCleanBox = () => {\n    if (imageCanvasRef.current) {\n      imageCanvasRef.current.cleanBoxes();\n    }\n  };\n  function instanceSegmentation() {\n    if (!screenShot) {\n      alert(\"Stop video to choose a video frame!\");\n      return;\n    }\n    setShowCanvas(true);\n    axios.post(instanceSegmentationRouter, {\n      image: screenShot\n    }).then(resp => {\n      console.log(resp);\n      imageCanvasRef.current.setBoxes(resp.data.seg_info);\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  // upload image/start conversation\n  function uploadImage() {\n    axios.post(imageUploadRouter, {\n      image: videoRef.current.captureScreenshot()\n    }).then(resp => {\n      console.log(resp);\n      setScreenShot(videoRef.current.captureScreenshot());\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  ////////////////////////////////////  useImperativeHandle  ///////////////////////////////\n  // foward to parent elements\n  useImperativeHandle(ref, () => {\n    return {\n      captureScreenshot() {\n        if (videoRef.current) videoRef.current.captureScreenshot();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-panel-container\",\n    children: [/*#__PURE__*/_jsxDEV(VideoPlayer, {\n      videoURL: props.videoURL,\n      showCanvas: showCanvas,\n      ref: videoRef,\n      screenShot: screenShot,\n      setScreenShot: setScreenShot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-btn-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"movie-list-btn\",\n        onClick: toggleShowCanvas,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-btn-text-container\",\n          children: \"Bounding Box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-btn-icon-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: IconBoudingBox,\n            alt: \"a icon for btn\",\n            className: \"video-btn-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"movie-list-btn\",\n        onClick: instanceSegmentation,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-btn-text-container\",\n          children: \"Instance Segmentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-btn-icon-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: IconInsSegmentation,\n            alt: \"a icon for btn\",\n            className: \"video-btn-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"movie-list-btn\",\n        onClick: callCleanBox,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-btn-text-container\",\n          children: \"Clean Boxes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-btn-icon-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: IconCleanBoxes,\n            alt: \"a icon for btn\",\n            className: \"video-btn-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), showCanvas ? /*#__PURE__*/_jsxDEV(ImageCanvas, {\n      ref: imageCanvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 22\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}, \"Uuq7i2+iuEr9BcOF5ceAyIiR17s=\")), \"Uuq7i2+iuEr9BcOF5ceAyIiR17s=\");\n_c2 = MoviePanel;\nexport default MoviePanel;\nvar _c, _c2;\n$RefreshReg$(_c, \"MoviePanel$forwardRef\");\n$RefreshReg$(_c2, \"MoviePanel\");","map":{"version":3,"names":["React","useRef","forwardRef","useState","useImperativeHandle","ImageCanvas","VideoPlayer","axios","instanceSegmentationRouter","imageUploadRouter","IconBoudingBox","IconInsSegmentation","IconCleanBoxes","IconStartCon","IconScencesGraph","jsxDEV","_jsxDEV","MoviePanel","_s","_c","props","ref","showCanvas","setShowCanvas","screenShot","setScreenShot","toggleShowCanvas","imageCanvasRef","videoRef","callCleanBox","current","cleanBoxes","instanceSegmentation","alert","post","image","then","resp","console","log","setBoxes","data","seg_info","catch","e","uploadImage","captureScreenshot","className","children","videoURL","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c2","$RefreshReg$"],"sources":["/home/yhx/Projects/AnnVideo/Frontend/src/components/MoviePanel.js"],"sourcesContent":["// components/MoviePanel.js\n\nimport React,{useRef, forwardRef, useState, useImperativeHandle} from 'react';\nimport ImageCanvas from './ImageCanvas';\nimport VideoPlayer from './VideoPlayer';\nimport axios from \"axios\";\nimport { instanceSegmentationRouter, imageUploadRouter } from '../utils/router';\n\nimport IconBoudingBox from \"../assets/icon/draw.svg\";\nimport IconInsSegmentation from \"../assets/icon/set.svg\";\nimport IconCleanBoxes from \"../assets/icon/clean.svg\";\nimport IconStartCon from \"../assets/icon/start.svg\";\nimport IconScencesGraph from \"../assets/icon/relation.svg\";\n\n\nconst MoviePanel = forwardRef( (props, ref) => {\n  const [showCanvas, setShowCanvas] = useState(false);\n  const [screenShot, setScreenShot] = useState();\n  //toggle show canvas\n  function toggleShowCanvas() {\n    setShowCanvas(!showCanvas);\n  }\n\n\n  // Placeholder content for the MoviePanel\n  const imageCanvasRef = useRef();\n  const videoRef = useRef();\n  const callCleanBox = () => {\n    if(imageCanvasRef.current){\n      imageCanvasRef.current.cleanBoxes();\n    }\n  }\n\n  function instanceSegmentation(){\n    if(!screenShot){\n      alert(\"Stop video to choose a video frame!\");\n      return;\n    }\n\n    setShowCanvas(true);\n    axios.post(instanceSegmentationRouter, {\n      image:screenShot,\n    })\n    .then((resp) => {\n      console.log(resp);\n      imageCanvasRef.current.setBoxes(resp.data.seg_info)\n    })\n    .catch((e) => {\n      console.log(e);\n    })\n  }\n\n\n  // upload image/start conversation\n  function uploadImage(){\n    axios.post(imageUploadRouter, {\n      image:videoRef.current.captureScreenshot(),\n    })\n    .then((resp) => {\n      console.log(resp);\n      setScreenShot(videoRef.current.captureScreenshot());\n    })\n    .catch((e) => {\n      console.log(e);\n    })\n  }\n\n    ////////////////////////////////////  useImperativeHandle  ///////////////////////////////\n    // foward to parent elements\n    useImperativeHandle(ref, () => {\n      return {\n          captureScreenshot(){\n            if(videoRef.current)\n            videoRef.current.captureScreenshot()\n          },\n      }\n  }, [])\n\n   \n\n  return (\n    <div className=\"movie-panel-container\">\n      {/* <h2>Video Panel</h2> */}\n      <VideoPlayer \n        videoURL={props.videoURL} \n        showCanvas={showCanvas} \n        ref={videoRef}\n        screenShot={screenShot}\n        setScreenShot={setScreenShot}\n\n      ></VideoPlayer>\n\n      \n      <div className='movie-btn-list'>\n          <button className='movie-list-btn' onClick={toggleShowCanvas}>\n            <div className='video-btn-text-container'>Bounding Box</div>\n            <div className='video-btn-icon-container'>\n              <img src={IconBoudingBox} alt=\"a icon for btn\" className='video-btn-icon'></img>\n            </div>\n          </button>\n\n\n          <button className='movie-list-btn' onClick={instanceSegmentation}>\n          <div className='video-btn-text-container'>Instance Segmentation</div>\n            <div className='video-btn-icon-container'>\n              <img src={IconInsSegmentation} alt=\"a icon for btn\" className='video-btn-icon'></img>\n            </div>\n          </button> \n    \n\n   \n          <button className='movie-list-btn' onClick={callCleanBox}>\n            <div className='video-btn-text-container'>Clean Boxes</div>\n            <div className='video-btn-icon-container'>\n               <img src={IconCleanBoxes} alt=\"a icon for btn\" className='video-btn-icon'></img>\n            </div>\n          </button>\n\n\n          {/* <button className='movie-list-btn' onClick={() => {}}>\n            <div className='video-btn-text-container'>Scenes Graph</div>\n            <div className='video-btn-icon-container'>\n              <img src={IconScencesGraph} alt=\"a icon for btn\" className='video-btn-icon'></img>\n            </div>\n          </button>  */}\n\n\n          {/* <button className='movie-list-btn' onClick={uploadImage}>\n            <div className='video-btn-text-container'>Start Conversation</div>\n            <div className='video-btn-icon-container'>\n              <img src={IconStartCon} alt=\"a icon for btn\" className='video-btn-icon'></img>  \n            </div>\n          </button>  */}\n      </div>\n      {\n        showCanvas ? <ImageCanvas ref={imageCanvasRef}></ImageCanvas> :\"\"\n      }\n\n    \n      \n    </div>\n  );\n});\n\nexport default MoviePanel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}